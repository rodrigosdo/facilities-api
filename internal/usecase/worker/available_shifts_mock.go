// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/worker/available_shifts.go

// Package worker is a generated GoMock package.
package worker

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAvailableShifts is a mock of AvailableShifts interface.
type MockAvailableShifts struct {
	ctrl     *gomock.Controller
	recorder *MockAvailableShiftsMockRecorder
}

// MockAvailableShiftsMockRecorder is the mock recorder for MockAvailableShifts.
type MockAvailableShiftsMockRecorder struct {
	mock *MockAvailableShifts
}

// NewMockAvailableShifts creates a new mock instance.
func NewMockAvailableShifts(ctrl *gomock.Controller) *MockAvailableShifts {
	mock := &MockAvailableShifts{ctrl: ctrl}
	mock.recorder = &MockAvailableShiftsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvailableShifts) EXPECT() *MockAvailableShiftsMockRecorder {
	return m.recorder
}

// GetAvailableShifts mocks base method.
func (m *MockAvailableShifts) GetAvailableShifts(ctx context.Context, req GetAvailableShiftsRequest) (*GetAvailableShiftsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableShifts", ctx, req)
	ret0, _ := ret[0].(*GetAvailableShiftsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableShifts indicates an expected call of GetAvailableShifts.
func (mr *MockAvailableShiftsMockRecorder) GetAvailableShifts(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableShifts", reflect.TypeOf((*MockAvailableShifts)(nil).GetAvailableShifts), ctx, req)
}
